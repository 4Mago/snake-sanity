"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _default2 = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _formBuilder = require("part:@sanity/form-builder");

var _secrets = require("../actions/secrets");

var _assets = require("../actions/assets");

var _getPosterSrc = _interopRequireDefault(require("../util/getPosterSrc"));

var _client = _interopRequireDefault(require("part:@sanity/base/client"));

var _preview = require("part:@sanity/base/preview");

var _default3 = _interopRequireDefault(require("part:@sanity/components/dialogs/default"));

var _fullscreen = _interopRequireDefault(require("part:@sanity/components/dialogs/fullscreen"));

var _content = _interopRequireDefault(require("part:@sanity/components/dialogs/content"));

var _patchEvent = _interopRequireWildcard(require("part:@sanity/form-builder/patch-event"));

var _buttonCollection = _interopRequireDefault(require("part:@sanity/components/buttons/button-collection"));

var _checkbox = _interopRequireDefault(require("part:@sanity/components/toggles/checkbox"));

var _default4 = _interopRequireDefault(require("part:@sanity/components/formfields/default"));

var _popover = _interopRequireDefault(require("part:@sanity/components/dialogs/popover"));

var _alert = _interopRequireDefault(require("part:@sanity/components/alerts/alert"));

var _pluginIcon = _interopRequireDefault(require("part:@sanity/base/plugin-icon"));

var _spinner = _interopRequireDefault(require("part:@sanity/components/loading/spinner"));

var _Setup = _interopRequireDefault(require("./Setup"));

var _Video = _interopRequireDefault(require("./Video"));

var _SelectAsset = _interopRequireDefault(require("./SelectAsset"));

var _MuxLogo = _interopRequireDefault(require("./MuxLogo"));

var _Uploader = _interopRequireDefault(require("./Uploader"));

var _Input = _interopRequireDefault(require("./Input.css"));

var _temp;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var NOOP = () => {
  /* intentional noop */
};

var cachedSecrets = {
  token: null,
  secretKey: null,
  enableSignedUrls: false,
  signingKeyId: null,
  signingKeyPrivate: null
};

function validateSecrets(secrets) {
  if (secrets.token === null) return true;
  if (secrets.secretKey === null) return true;
  return false;
}

function getSecrets() {
  if (cachedSecrets.token) {
    return Promise.resolve({
      isInitialSetup: true,
      needsSetup: false,
      secrets: cachedSecrets
    });
  }

  return (0, _secrets.fetchSecrets)().then((_ref) => {
    var secrets = _ref.secrets,
        exists = _ref.exists;
    cachedSecrets.token = secrets.token;
    cachedSecrets.secretKey = secrets.secretKey;
    cachedSecrets.enableSignedUrls = secrets.enableSignedUrls;
    cachedSecrets.signingKeyId = secrets.signingKeyId;
    cachedSecrets.signingKeyPrivate = secrets.signingKeyPrivate;
    return {
      isInitialSetup: !exists,
      needsSetup: validateSecrets(cachedSecrets),
      secrets: cachedSecrets
    };
  });
}

var _default = (0, _formBuilder.withDocument)((_temp = class MuxVideoInput extends _react.Component {
  constructor(_props) {
    super(_props);

    _defineProperty(this, "state", {
      assetDocument: null,
      confirmRemove: false,
      deleteOnMuxChecked: true,
      deleteAssetDocumentChecked: true,
      error: null,
      hasFocus: false,
      isInitialSetup: true,
      isLoading: 'secrets',
      needsSetup: true,
      secrets: null,
      isSigned: false,
      showSetup: false,
      showBrowser: false,
      videoReadyToPlay: false
    });

    _defineProperty(this, "focus", () => {
      this.handleFocus();
    });

    _defineProperty(this, "handleFocus", () => {
      this.setState({
        hasFocus: true
      });
    });

    _defineProperty(this, "handleBlur", () => {
      this.setState({
        hasFocus: false
      });
    });

    _defineProperty(this, "pollMux", () => {
      var assetDocument = this.state.assetDocument;

      if (!assetDocument) {
        return;
      }

      if (this.pollInterval) {
        return;
      }

      this.pollInterval = setInterval(() => {
        (0, _assets.getAsset)(assetDocument.assetId).then(response => {
          var props = response.data;

          _client.default.patch(assetDocument._id).set({
            status: props.status,
            data: props
          }).commit({
            returnDocuments: false
          });
        }).catch(error => {
          this.setState({
            error
          });
        });
      }, 2000);
    });

    _defineProperty(this, "handleSetupButtonClicked", event => {
      this.setState(prevState => ({
        showSetup: !prevState.showStetup
      }));
    });

    _defineProperty(this, "handleSaveSetup", (_ref2) => {
      var token = _ref2.token,
          secretKey = _ref2.secretKey,
          enableSignedUrls = _ref2.enableSignedUrls,
          signingKeyId = _ref2.signingKeyId,
          signingKeyPrivate = _ref2.signingKeyPrivate;
      cachedSecrets.token = token;
      cachedSecrets.secretKey = secretKey;
      cachedSecrets.enableSignedUrls = enableSignedUrls;
      cachedSecrets.signingKeyId = signingKeyId;
      cachedSecrets.signingKeyPrivate = signingKeyPrivate;
      this.setState({
        showSetup: false,
        secrets: cachedSecrets,
        needsSetup: validateSecrets(cachedSecrets)
      });
    });

    _defineProperty(this, "handleCancelSaveSetup", () => {
      this.setState({
        showSetup: false
      });
    });

    _defineProperty(this, "handleOnUploadComplete", result => {
      var onChange = this.props.onChange;
      var _id = result._id;
      onChange(_patchEvent.default.from([(0, _patchEvent.setIfMissing)({
        asset: {
          _ref: _id
        }
      }, []), (0, _patchEvent.set)({
        _ref: _id
      }, ['asset'])]));
      this.setState({
        assetDocument: result.document
      }, () => {
        this.setupAssetListener();
      });
    });

    _defineProperty(this, "handleRemoveVideoButtonClicked", event => {
      event.preventDefault();
      event.stopPropagation();
      this.setState({
        confirmRemove: true
      });
    });

    _defineProperty(this, "handleRemoveVideo", () => {
      var assetDocument = this.state.assetDocument;
      this.setState({
        isLoading: true
      });

      var unsetAsset = () => {
        return new Promise((resolve, reject) => {
          this.setState({
            assetDocument: null,
            confirmRemove: false,
            isLoading: false
          }, () => {
            if (this.state.deleteOnMuxChecked || this.state.deleteAssetDocumentChecked) {
              return _client.default.patch(this.props.document._id).unset(['video']).commit({
                returnDocuments: false
              }).then(() => {
                if (!assetDocument) {
                  return resolve();
                }

                return _client.default.delete(assetDocument._id).then(() => {
                  resolve();
                }).catch(error => {
                  reject(error);
                });
              });
            }

            return resolve();
          });
        });
      };

      return unsetAsset().then(() => {
        if (this.state.deleteOnMuxChecked) {
          return (0, _assets.deleteAsset)(assetDocument.assetId).catch(error => {
            this.setState({
              error
            });
          });
        }

        return true;
      }).catch(error => {
        this.setState({
          error
        });
      });
    });

    _defineProperty(this, "handleCancelRemove", event => {
      this.setState({
        confirmRemove: false,
        deleteOnMuxChecked: true,
        deleteAssetDocumentChecked: true
      });
    });

    _defineProperty(this, "handleDeleteOnMuxCheckBoxClicked", event => {
      this.setState(prevState => ({
        deleteOnMuxChecked: !prevState.deleteOnMuxChecked
      }));
    });

    _defineProperty(this, "handleDeleteAssetDocumentCheckBoxClicked", event => {
      this.setState(prevState => ({
        deleteAssetDocumentChecked: !prevState.deleteAssetDocumentChecked
      }));
    });

    _defineProperty(this, "handleSetThumbButton", event => {
      if (!this.videoPlayer.current) {
        return;
      }

      var _this$state = this.state,
          assetDocument = _this$state.assetDocument,
          isSigned = _this$state.isSigned;
      var currentTime = this.videoPlayer.current.getVideoElement().currentTime;

      _client.default.patch(assetDocument._id).set({
        thumbTime: currentTime
      }).commit({
        returnDocuments: false
      }).then(response => {
        var options = {
          time: currentTime,
          width: 320,
          height: 320,
          fitMode: 'crop',
          isSigned,
          signingKeyId: cachedSecrets.signingKeyId,
          signingKeyPrivate: cachedSecrets.signingKeyPrivate
        };
        var thumb = (0, _getPosterSrc.default)(assetDocument.playbackId, options);
        this.setState({
          thumb
        });
      }).catch(error => {
        this.setState({
          error
        });
      });
    });

    _defineProperty(this, "handleErrorClose", event => {
      if (event) {
        event.preventDefault();
      }

      this.setState({
        error: null
      });
    });

    _defineProperty(this, "handleCloseThumbPreview", event => {
      this.setState({
        thumb: null
      });
    });

    _defineProperty(this, "handleBrowseButton", event => {
      this.setState({
        showBrowser: true
      });
    });

    _defineProperty(this, "handleCloseBrowser", event => {
      this.setState({
        showBrowser: false
      });
    });

    _defineProperty(this, "handleSelectAsset", asset => {
      var onChange = this.props.onChange;
      onChange(_patchEvent.default.from([(0, _patchEvent.setIfMissing)({
        asset: {
          _ref: asset._id
        }
      }, []), (0, _patchEvent.set)({
        _ref: asset._id
      }, ['asset'])]));
      this.setState({
        showBrowser: false,
        assetDocument: asset
      }, () => {
        this.setupAssetListener();
      });
    });

    _defineProperty(this, "handleVideoReadyToPlay", () => {
      this.setState({
        videoReadyToPlay: true
      });
    });

    getSecrets().then((_ref3) => {
      var _props$value;

      var secrets = _ref3.secrets,
          isInitialSetup = _ref3.isInitialSetup,
          needsSetup = _ref3.needsSetup;
      this.setState({
        secrets,
        isInitialSetup,
        needsSetup,
        isLoading: (_props$value = _props.value) === null || _props$value === void 0 ? void 0 : _props$value.asset // If there is an asset continue loading

      });
    }).catch(error => this.setState({
      error
    }));
    this.setupButton = /*#__PURE__*/_react.default.createRef();
    this.pollInterval = null;
    this.video = /*#__PURE__*/_react.default.createRef();
    this.removeVideoButton = /*#__PURE__*/_react.default.createRef();
    this.videoPlayer = /*#__PURE__*/_react.default.createRef();
  }

  componentDidMount() {
    this.setupAssetListener();
  }

  componentWillUnmount() {
    if (this.subscription) {
      this.subscription.unsubscribe();
    }

    if (this.pollInterval) {
      clearInterval(this.pollInterval);
      this.pollInterval = null;
    }
  }

  getAsset() {
    var value = this.props.value;
    return value ? value.asset : null;
  }

  setupAssetListener() {
    if (this.subscription) {
      this.subscription.unsubscribe();
    }

    this.setState({
      videoReadyToPlay: false
    });
    var asset = this.getAsset();

    if (!asset) {
      return;
    }

    this.subscription = (0, _preview.observePaths)(asset, ['thumbTime', 'data', 'assetId', 'playbackId', 'status']).pipe((0, _operators.tap)(assetDocument => {
      var _assetDocument$data, _assetDocument$data$p;

      this.setState({
        assetDocument
      });

      if (assetDocument && assetDocument.status === 'errored') {
        clearInterval(this.pollInterval);
        this.pollInterval = null; // todo: use client.observable

        return this.handleRemoveVideo().then(() => {
          this.setState({
            isLoading: false,
            error: new Error(assetDocument.data.errors.messages.join(' '))
          });
        });
      }

      if (assetDocument && assetDocument.status === 'preparing') {
        this.pollMux();
      }

      if (assetDocument && assetDocument.status === 'ready') {
        clearInterval(this.pollInterval);
        this.pollInterval = null;
      } // eslint-disable-next-line camelcase


      var isSigned = (assetDocument === null || assetDocument === void 0 ? void 0 : (_assetDocument$data = assetDocument.data) === null || _assetDocument$data === void 0 ? void 0 : (_assetDocument$data$p = _assetDocument$data.playback_ids[0]) === null || _assetDocument$data$p === void 0 ? void 0 : _assetDocument$data$p.policy) === 'signed';
      this.setState({
        assetDocument,
        isSigned,
        isLoading: false
      });
      return (0, _rxjs.of)(assetDocument);
    })).subscribe();
  }

  renderSetup() {
    var secrets = this.state.secrets;

    var setup = /*#__PURE__*/_react.default.createElement(_Setup.default, {
      secrets: secrets ? secrets : null,
      onSave: this.handleSaveSetup,
      onCancel: this.handleCancelSaveSetup
    });

    return /*#__PURE__*/_react.default.createElement(_popover.default, {
      color: "default",
      useOverlay: true,
      onEscape: this.handleCancelSaveSetup,
      onClickOutside: this.handleCancelSaveSetup,
      padding: "large"
    }, setup);
  }

  renderSetupButton() {
    var _this$state2 = this.state,
        isLoading = _this$state2.isLoading,
        showSetup = _this$state2.showSetup,
        needsSetup = _this$state2.needsSetup;
    var renderSetup = !isLoading && showSetup;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: _Input.default.setupButtonContainer
    }, /*#__PURE__*/_react.default.createElement(_default2.default, {
      color: needsSetup ? 'danger' : 'primary',
      onClick: this.handleSetupButtonClicked,
      icon: _pluginIcon.default,
      kind: "simple",
      title: "Configure MUX API access",
      tabIndex: 1
    }), renderSetup && this.renderSetup());
  }

  renderSetupNotice() {
    var _this$state3 = this.state,
        isLoading = _this$state3.isLoading,
        needsSetup = _this$state3.needsSetup,
        isInitialSetup = _this$state3.isInitialSetup;
    var renderSetupNotice = needsSetup;

    if (isLoading || !renderSetupNotice) {
      return null;
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: _Input.default.warning
    }, /*#__PURE__*/_react.default.createElement(_MuxLogo.default, null), isInitialSetup && /*#__PURE__*/_react.default.createElement("p", null, "Looks like this is the first time you are using the MUX video plugin in this dataset. Great!"), /*#__PURE__*/_react.default.createElement("p", null, "Before you can upload video, you must set your MUX credentials."), /*#__PURE__*/_react.default.createElement("p", null, "Click the plugin button in the field title to open Setup."));
  } // eslint-disable-next-line complexity


  renderAsset() {
    var _this$state4 = this.state,
        assetDocument = _this$state4.assetDocument,
        isSigned = _this$state4.isSigned;
    var renderAsset = !!assetDocument;

    if (!renderAsset) {
      return null;
    }

    var isSignedAlert = isSigned ? /*#__PURE__*/_react.default.createElement("div", {
      className: _Input.default.alert
    }, /*#__PURE__*/_react.default.createElement(_alert.default, {
      title: "Note",
      color: "success"
    }, "This mux asset is using a signed url")) : null;
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, isSignedAlert, /*#__PURE__*/_react.default.createElement(_Video.default, {
      assetDocument: assetDocument,
      ref: this.videoPlayer,
      onReady: this.handleVideoReadyToPlay,
      onCancel: this.handleRemoveVideo
    }));
  }

  renderVideoButtons() {
    var _this$state5 = this.state,
        assetDocument = _this$state5.assetDocument,
        confirmRemove = _this$state5.confirmRemove;
    var readOnly = this.props.readOnly;

    if (assetDocument && assetDocument.status === 'ready' && !readOnly) {
      return /*#__PURE__*/_react.default.createElement(_react.Fragment, null, /*#__PURE__*/_react.default.createElement(_default2.default, {
        inverted: true,
        kind: "default",
        onClick: this.handleBrowseButton,
        title: "Select a previous uploaded video"
      }, "Browse"), /*#__PURE__*/_react.default.createElement(_default2.default, {
        inverted: true,
        disabled: this.state.videoReadyToPlay === false,
        kind: "default",
        onClick: this.handleSetThumbButton,
        title: "Set thumbnail image from the current video position"
      }, "Set thumb"), /*#__PURE__*/_react.default.createElement(_default2.default, {
        ref: this.removeVideoButton,
        inverted: true,
        kind: "default",
        color: "danger",
        onClick: confirmRemove ? NOOP : this.handleRemoveVideoButtonClicked
      }, "Remove", /*#__PURE__*/_react.default.createElement("div", {
        className: _Input.default.popoverAnchor
      }, confirmRemove && /*#__PURE__*/_react.default.createElement(_popover.default, {
        color: "default",
        useOverlay: true,
        onEscape: this.handleCancelRemove,
        onClickOutside: this.handleCancelRemove,
        padding: "large"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: _Input.default.confirmDeletePopover
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: _Input.default.confirmDeletePopoverButtons
      }, /*#__PURE__*/_react.default.createElement(_buttonCollection.default, null, /*#__PURE__*/_react.default.createElement(_default2.default, {
        onClick: this.handleCancelRemove
      }, "Cancel"), /*#__PURE__*/_react.default.createElement(_default2.default, {
        color: "danger",
        onClick: this.handleRemoveVideo,
        loading: !!this.state.isLoading
      }, "Remove")))), /*#__PURE__*/_react.default.createElement("div", {
        className: _Input.default.deleteCheckboxRow
      }, /*#__PURE__*/_react.default.createElement(_checkbox.default, {
        checked: this.state.deleteOnMuxChecked,
        onChange: this.handleDeleteOnMuxCheckBoxClicked,
        label: "Delete asset on MUX.com"
      })), /*#__PURE__*/_react.default.createElement("div", {
        className: _Input.default.deleteCheckboxRow
      }, /*#__PURE__*/_react.default.createElement(_checkbox.default, {
        disabled: this.state.deleteOnMuxChecked,
        checked: this.state.deleteOnMuxChecked || this.state.deleteAssetDocumentChecked,
        onChange: this.handleDeleteAssetDocumentCheckBoxClicked,
        label: "Delete video from dataset"
      }))))));
    }

    return null;
  }

  renderThumbPreview() {
    return /*#__PURE__*/_react.default.createElement(_popover.default, {
      color: "default",
      useOverlay: true,
      onClose: this.handleCloseThumbPreview,
      onEscape: this.handleCloseThumbPreview,
      onClickOutside: this.handleCloseThumbPreview,
      padding: "large"
    }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("h4", null, "Saved thumbnail frame:"), /*#__PURE__*/_react.default.createElement("img", {
      className: _Input.default.thumbPreview,
      src: this.state.thumb,
      width: 240,
      height: 240
    })));
  }

  renderBrowser() {
    return /*#__PURE__*/_react.default.createElement(_fullscreen.default, {
      title: "Select video",
      onClose: this.handleCloseBrowser,
      isOpen: true
    }, /*#__PURE__*/_react.default.createElement(_SelectAsset.default, {
      onSelect: this.handleSelectAsset
    }));
  }

  renderError() {
    var error = this.state.error;

    if (!error) {
      return null;
    }

    return /*#__PURE__*/_react.default.createElement(_default3.default, {
      title: "Error",
      color: "danger",
      useOverlay: true,
      onClose: this.handleErrorClose,
      onEscape: this.handleErrorClose,
      onClickOutside: this.handleErrorClose
    }, /*#__PURE__*/_react.default.createElement(_content.default, {
      size: "small"
    }, error.message));
  }

  render() {
    var _this$props = this.props,
        type = _this$props.type,
        level = _this$props.level,
        markers = _this$props.markers;
    var _this$state6 = this.state,
        isLoading = _this$state6.isLoading,
        secrets = _this$state6.secrets,
        hasFocus = _this$state6.hasFocus,
        needsSetup = _this$state6.needsSetup,
        error = _this$state6.error,
        thumb = _this$state6.thumb,
        showBrowser = _this$state6.showBrowser;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: _Input.default.root
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: _Input.default.header
    }, /*#__PURE__*/_react.default.createElement(_default4.default, {
      label: type.title,
      markers: markers,
      description: type.description,
      level: level,
      className: _Input.default.formField
    }), this.renderSetupButton()), isLoading === 'secrets' && /*#__PURE__*/_react.default.createElement("div", {
      className: _Input.default.isLoading
    }, /*#__PURE__*/_react.default.createElement(_spinner.default, {
      inline: true
    }), /*#__PURE__*/_react.default.createElement("span", null, "Fetching credentials")), this.renderSetupNotice(), !needsSetup && /*#__PURE__*/_react.default.createElement(_Uploader.default, {
      buttons: this.renderVideoButtons(),
      hasFocus: hasFocus,
      onBlur: this.handleBlur,
      onFocus: this.handleFocus,
      onSetupButtonClicked: this.handleSetupButtonClicked,
      onUploadComplete: this.handleOnUploadComplete,
      secrets: secrets,
      onBrowse: this.handleBrowseButton
    }, this.renderAsset()), thumb && this.renderThumbPreview(), showBrowser && this.renderBrowser(), error && this.renderError());
  }

}, _temp));

exports.default = _default;
//# sourceMappingURL=Input.js.map